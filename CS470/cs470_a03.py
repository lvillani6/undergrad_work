# -*- coding: utf-8 -*-
"""CS470_A03

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1joHuk9hy_b4V2uwrogREvTVpFK9BrLKc
"""

import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt

class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

#a.1
(train_images, train_labels), (test_images, test_labels) = keras.datasets.fashion_mnist.load_data()

print("Shape of the training dataset, number of images and resolution:", train_images.shape)
print("All distinct training labels:", np.unique(train_labels))

train_images = train_images/255.0
test_images = test_images/255.0
#Preprocessing of the data performed due to causing the accuracy to increase from ~84% to ~91%

#a.2
model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28,28)),    #Input layers based on the resolution of dataset
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dense(10)                        #Output layers based on number of classes
])

model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

#a.3
model.fit(train_images, train_labels, epochs=10, verbose=1)

#a.4
print()
test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2)
print('Test accuracy:', test_acc)
print()

print('='*50) #=================================================================

# Number of hidden layers: 1, 2
# Number of nodes in each layer: 128, 256
# Activation functions: 'relu', 'sigmoid'
# b.1

print("[# Hidden Layers, # Nodes, Activation Function]: Accuracy")
err = [[],[],[],[],[],[],[],[]]
i = 0
for numLayers in [1,2]:
  for numNodes in [128, 256]:
    for actf in ['relu', 'sigmoid']:
      print("[" + str(numLayers) + ",\t" + str(numNodes) + ",\t" + actf + "\t]:",end="\t")
      model = keras.Sequential()
      model.add(keras.layers.Flatten(input_shape=(28,28)))
      for n in range(numLayers):
        model.add(keras.layers.Dense(numNodes, activation=actf))
      model.add(keras.layers.Dense(10))

      model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])
      
      hist = model.fit(train_images, train_labels, epochs=10, verbose=0)
      thishist = hist.history['accuracy'][-1]
      print(thishist)
      err[i].append(numLayers)
      err[i].append(numNodes)
      err[i].append(actf)
      err[i].append(thishist)
      i+=1

bestacc = 0.0
for i in range(8):
  if(err[i][3]>bestacc):
    bestacc=err[i][3]
    bestcombo=i

print("\nBest Hyperparameters:")
print("[" + str(err[bestcombo][0]) + ",\t" + str(err[bestcombo][1]) + ",\t" + err[bestcombo][2] + "\t]:\t" + str(err[bestcombo][3]))


# b.2

bestLayers  = err[bestcombo][0]
bestNodes   = err[bestcombo][1]
bestactf    = err[bestcombo][2]

bestmodel = keras.Sequential()
bestmodel.add(keras.layers.Flatten(input_shape=(28,28)))
for n in range(bestLayers):
  bestmodel.add(keras.layers.Dense(bestNodes, activation=bestactf))
bestmodel.add(keras.layers.Dense(10))

bestmodel.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

bestmodel.fit(train_images, train_labels, epochs=10, verbose=0)

print()
test_loss, test_acc = bestmodel.evaluate(test_images,  test_labels, verbose=2)
print('Test accuracy:', test_acc)
print()

print('='*50) #=================================================================